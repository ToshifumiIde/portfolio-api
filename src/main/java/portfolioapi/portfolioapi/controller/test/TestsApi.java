/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package portfolioapi.portfolioapi.controller.test;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Size;
import org.apache.ibatis.javassist.NotFoundException;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import portfolioapi.portfolioapi.controller.test.model.ErrorResponse;
import portfolioapi.portfolioapi.controller.test.model.TestDto;
import portfolioapi.portfolioapi.controller.test.model.TestRegistrationDto;
import portfolioapi.portfolioapi.controller.test.model.TestRow;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Test", description = "testApiの作成")
public interface TestsApi {

  /**
   * POST /tests : Testを生成する
   *
   * @param testRegistrationDto (optional)
   * @return OK (status code 200)
   * or Bad Request (status code 400)
   */
  @Operation(
    operationId = "createTest",
    summary = "Testを生成する",
    tags = {"Test"},
    responses = {
      @ApiResponse(responseCode = "200", description = "OK"),
      @ApiResponse(responseCode = "400", description = "Bad Request")
    }
  )
  @RequestMapping(
    method = RequestMethod.POST,
    value = "/tests",
    consumes = {"application/json"}
  )
  ResponseEntity<Void> createTest(
    @Parameter(name = "TestRegistrationDto", description = "") @Valid @RequestBody(required = false) TestRegistrationDto testRegistrationDto
  );


  /**
   * DELETE /tests/{uuid} : Testを1件削除する
   *
   * @param uuid (required)
   * @return OK (status code 200)
   * or Not Found (status code 404)
   */
  @Operation(
    operationId = "deleteTest",
    summary = "Testを1件削除する",
    tags = {"Test"},
    responses = {
      @ApiResponse(responseCode = "200", description = "OK"),
      @ApiResponse(responseCode = "404", description = "Not Found")
    }
  )
  @RequestMapping(
    method = RequestMethod.DELETE,
    value = "/tests/{uuid}"
  )
  ResponseEntity<Void> deleteTest(
    @Parameter(name = "uuid", description = "", required = true, in = ParameterIn.PATH) @PathVariable("uuid") String uuid
  );


  /**
   * GET /tests/{uuid} : Testを1件取得する
   *
   * @param uuid テストUUID (required)
   * @return OK (status code 200)
   * or Not Found (status code 404)
   */
  @Operation(
    operationId = "getTest",
    summary = "Testを1件取得する",
    tags = {"Test"},
    responses = {
      @ApiResponse(responseCode = "200", description = "OK", content = {
        @Content(mediaType = "application/json", schema = @Schema(implementation = TestDto.class))
      }),
      @ApiResponse(responseCode = "404", description = "Not Found", content = {
        @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
      })
    }
  )
  @RequestMapping(
    method = RequestMethod.GET,
    value = "/tests/{uuid}",
    produces = {"application/json"}
  )
  ResponseEntity<TestDto> getTest(
    @Parameter(name = "uuid", description = "テストUUID", required = true, in = ParameterIn.PATH) @PathVariable("uuid") String uuid
  ) throws NotFoundException;


  /**
   * GET /tests : Test一覧を取得する
   *
   * @param title       (optional)
   * @param description (optional)
   * @return OK (status code 200)
   */
  @Operation(
    operationId = "listTests",
    summary = "Test一覧を取得する",
    tags = {"Test"},
    responses = {
      @ApiResponse(responseCode = "200", description = "OK", content = {
        @Content(mediaType = "application/json", schema = @Schema(implementation = TestRow.class))
      })
    }
  )
  @RequestMapping(
    method = RequestMethod.GET,
    value = "/tests",
    produces = {"application/json"}
  )
  ResponseEntity<TestRow> listTests(
    @Size(max = 255) @Parameter(name = "title", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "title", required = false) String title,
    @Size(max = 1000) @Parameter(name = "description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "description", required = false) String description
  );


  /**
   * PATCH /tests/{uuid} : Testを1件部分更新する
   *
   * @param uuid                テストUUID (required)
   * @param testRegistrationDto (optional)
   * @return OK (status code 200)
   * or Not Found (status code 404)
   */
  @Operation(
    operationId = "updateTest",
    summary = "Testを1件部分更新する",
    tags = {"Test"},
    responses = {
      @ApiResponse(responseCode = "200", description = "OK"),
      @ApiResponse(responseCode = "404", description = "Not Found")
    }
  )
  @RequestMapping(
    method = RequestMethod.PATCH,
    value = "/tests/{uuid}",
    consumes = {"application/json"}
  )
  ResponseEntity<Void> updateTest(
    @Parameter(name = "uuid", description = "テストUUID", required = true, in = ParameterIn.PATH) @PathVariable("uuid") String uuid,
    @Parameter(name = "TestRegistrationDto", description = "") @Valid @RequestBody(required = false) TestRegistrationDto testRegistrationDto
  );

}
