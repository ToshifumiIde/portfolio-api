plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id "com.thinkimi.gradle.MybatisGenerator" version "2.4"
    id "org.openapi.generator" version "7.2.0"
}

group = 'portfolio-api'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'io.swagger.core.v3:swagger-annotations:2.2.8'
    compileOnly 'org.projectlombok:lombok'
    implementation 'org.openapitools:jackson-databind-nullable:0.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation "org.testcontainers:mysql:1.20.1"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.openApiGenerate {
    def name = System.getenv('YAML')
    def gen = System.getenv('GEN')
    generatorName = ""

    switch (gen) {
        case "spring":
            generatorName = "spring"
            configFile = "$rootDir/oas/config.json".toString()
            inputSpec = "$rootDir/oas/api/${name}.yml".toString()
            outputDir = "$rootDir/src/main/java".toString()
            apiPackage = "portfolioapi.portfolioapi.controller.${name}"
            modelPackage = "portfolioapi.portfolioapi.controller.${name}.model"

            generateApiTests = false
            generateModelTests = false

            generateModelDocumentation = false
            generateApiDocumentation = false

            globalProperties = [
                    modelDocs: 'false'
            ]
            break;
        case "ts":
            packageName = "front.restapi.${name}"
            generatorName = "typescript"
            inputSpec = "$rootDir/oas/api/${name}.yml".toString()
            outputDir = "$rootDir/ts".toString()
            apiPackage = packageName
            modelPackage = packageName + ".model"
            break;
        default:
            if (gen != null) {
                throw new GradleScriptException("invalidGeneratorName:" + gen)
            }
            break;
    }
}

tasks.test {
    // Groovyでのテスト時、Sharing のWARNINGエラーを消去する
    jvmArgs "-Xshare:off";
}

tasks.withType(Test){
    // Dynamic loading のWARNINGエラーを消去する
    jvmArgs "-XX:+EnableDynamicAgentLoading";
}


tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
}

mybatisGenerator {
    verbose = true
    def driverClass = "com.mysql.cj.jdbc.Driver"
    def driverFile = "$rootDir/tool/mysql-connector-j-8.4.0.jar"
    def port = 3306
    def connectionUrl = "jdbc:mysql://localhost:$port/ti_db"
    def userId = "user_name"
    def password = "user_password"
    def targetProject = "$rootDir/src/main"

    // 設定ファイル情報
    configFile = "$rootDir/src/main/resources/generatorConfig.xml"
    mybatisProperties = [
            'driverFile'   : driverFile,
            'driverClass'  : driverClass,
            'connectionUrl': connectionUrl,
            'userId'       : userId,
            'password'     : password,
            'targetProject': targetProject
    ]

    dependencies {
        mybatisGenerator 'com.itfsw:mybatis-generator-plugin:1.3.7'
        mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.7'
    }
}